#!/usr/bin/perl
use strict;
use warnings;
use feature qw(say);
use autodie;
use Encode  qw(decode);
use POSIX   qw(strftime);
use Term::ReadLine;
use InvertedIndex;
use Query;


my $docs  = shift // 'training.txt';
my $stash = "$docs.stash";
my $index = InvertedIndex->new;


if (-e $stash)
{
    say 'Unstashing...';
    my $start = time;
    $index->unstash($stash);
    say strftime 'Unstashing took %M:%S' => gmtime(time - $start);
}
else
{
    say 'Indexing...';
    my $start = time;

    open my $fh, '<:encoding(utf-8)', $docs;
    $index->index($_) while <$fh>;

    say strftime 'Indexing took %M:%S' => gmtime(time - $start);

    say 'Stashing..';
    $index->stash($stash);
}


my $term = Term::ReadLine->new('InvertedIndex');
while (defined($_ = $term->readline('query: ')))
{
    eval
    {
        my $query = Query::parse(decode 'UTF-8' => $_);
        my $row   = $query->run($index)->listref;
        print $_, "\t", $index->get_document($_) for @$row;
        say scalar @$row, " results";
    };
    warn "Invalid query: $@\n" if $@;
}

print "\nCleaning up, this may take a bit...\n";
